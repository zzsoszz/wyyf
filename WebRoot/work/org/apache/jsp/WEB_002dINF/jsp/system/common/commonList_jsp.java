/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.64
 * Generated at: 2015-09-13 16:24:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.system.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.lys.utils.DoubleUtils;
import org.springframework.util.LinkedCaseInsensitiveMap;
import java.util.List;
import java.util.Map;
import com.lys.utils.pagination.PageBean;
import com.power.utils.PageColumn;
import com.power.utils.PowerStatic;
import com.lys.utils.StringUtils;

public final class commonList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".pagination{visibility: visible !important;padding-left: 15px;}\r\n");
      out.write("#tool_tip{\r\n");
      out.write("\tposition:absolute;\r\n");
      out.write("\tborder:1px solid #DDD;\r\n");
      out.write("\tbackground:#ffffff;\r\n");
      out.write("\tpadding:10px;\r\n");
      out.write("\tcolor:#333;\r\n");
      out.write("\tdisplay:none;\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\twhite-space: pre-wrap;word-wrap:break-word;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");

	String listMark=StringUtils.toStringByObject(request.getAttribute("listMark"),true);//后台传入的标识，用于页面多个tabList 控件的使用
	if(StringUtils.hasText(listMark)){
		listMark="_"+listMark;
	}
	List<PageColumn> columnList=(List<PageColumn>)request.getAttribute("columnList");
	PageBean pages=(PageBean)request.getAttribute("pageBeanObj");
	Map<String, String> showcolumnMap=(Map<String, String>)request.getAttribute("showcolumnMap");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var TableAdvanced");
      out.print(listMark );
      out.write(" = function () {\r\n");
      out.write("     var initTable = function() {\r\n");
      out.write("        var oTable = $(\"#commonid");
      out.print(listMark );
      out.write("\").dataTable( { \r\n");
      out.write("        \t\"aaSorting\": [\r\n");
      out.write("   \t          \t");

   	          		for(int i=0;i<columnList.size();i++){
   	          			PageColumn map=columnList.get(i);
   	          			if(map.getOrder()!=null){
   	          	
      out.write("\r\n");
      out.write("   \t          \t\t\t\t[");
      out.print(i );
      out.write(',');
      out.write(' ');
      out.write('\'');
      out.print(map.getOrder() );
      out.write("'],\r\n");
      out.write("   \t          \t");
			
   	          			}
   	          		}
   	          	
      out.write("\r\n");
      out.write("    \t          \t], \r\n");
      out.write("     \t\t\"aoColumns\": [\r\n");
      out.write("\t\t\t\t");

					for(int i=0;i<columnList.size()-1;i++){
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t{ \"bSortable\": false },\r\n");
      out.write("\t\t\t\t");
	}
				
      out.write("\r\n");
      out.write("\t\t\t\t{ \"bSortable\": false }\r\n");
      out.write("     \t  \t ], \r\n");
      out.write("            \"iDisplayLength\": -1,//显示全部，分页自己来编辑处理\r\n");
      out.write("            \"oLanguage\": {\r\n");
      out.write("   \t\t\t    \"sEmptyTable\": \"无数据\"\r\n");
      out.write("   \t\t\t}\r\n");
      out.write("        });\r\n");
      out.write("        $(\"#commonid");
      out.print(listMark );
      out.write("_wrapper>div.row\").remove();//移除UI界面自带的分页\r\n");
      out.write("       \t//设置选择列显示的  事件\r\n");
      out.write("        $(\"#commonid");
      out.print(listMark );
      out.write("_column_toggler input[type='checkbox']\").change(function(){\r\n");
      out.write("            var iCol = parseInt($(this).attr(\"data-column\"));\r\n");
      out.write("            var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;\r\n");
      out.write("            oTable.fnSetColumnVis(iCol, (bVis ? false : true));//设置 某列是否可见\r\n");
      out.write("        });\r\n");
      out.write("    \t");

	  		for(int i=0;i<columnList.size();i++){
	  			PageColumn map=columnList.get(i);
	  			if( (showcolumnMap==null&&map.getHiddle()) || (showcolumnMap!=null&& showcolumnMap.get(String.valueOf(i))==null)){
	  	
      out.write("\r\n");
      out.write("\t  \t\toTable.fnSetColumnVis(");
      out.print(i );
      out.write(", false);//设置 某列隐藏\r\n");
      out.write("\t  \t");
			
	  			}
	  		}
	  	
      out.write("\r\n");
      out.write("    };\r\n");
      out.write("    return {\r\n");
      out.write("        init: function () {\r\n");
      out.write("            if (!jQuery().dataTable) {\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            initTable();\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("}();\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<table id=\"commonid");
      out.print(listMark );
      out.write("\" class=\"table table-striped table-bordered table-hover table-full-width\"  style=\"margin-top:20px;\">\r\n");
      out.write("\t<thead>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t");

		  		for(int i=0;i<columnList.size();i++){
		  			PageColumn map=columnList.get(i);
		  			if(map.getIscheckbox()){
		  	
      out.write("\t\r\n");
      out.write("\t\t  \t\t\t\t<th><input type=\"checkbox\" class=\"group-checkable\"/></th>\r\n");
      out.write("\t\t  \t");
		}else if(map.getHiddle2()){
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t<td style=\"display: none;\">\r\n");
      out.write("\t\t\t\t \t\t</td>\r\n");
      out.write("\t\t\t");
		}else{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<th>");
      out.print(map.getTitle() );
      out.write("</th>\r\n");
      out.write("\t\t\t");
}		
		  		}
		  	
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</thead>\r\n");
      out.write("\t<tbody>\r\n");
      out.write("\t");

		Boolean isTotal=false;//是否计算某些列的和值
		Map<String, Double> someColumMap=new LinkedCaseInsensitiveMap<Double>();
		List<Map<String, Object>> dataList=pages.getList();
  		for(int j=0,b=dataList.size();j<b;j++){
  			Map<String, Object> map= dataList.get(j);//行数据
  	
      out.write("\r\n");
      out.write("\t  \t<tr >\r\n");
      out.write("  \t\t\t");

		  		for(int i=0;i<columnList.size();i++){
		  			PageColumn columnmap=columnList.get(i);//列对象
		  			String column=columnmap.getColumn();
		  	
      out.write("\r\n");
      out.write("\t\t  \t");
	if(columnmap.getHiddle2()){
      out.write("\t\r\n");
      out.write("\t\t \t\t<td style=\"display: none;\">\r\n");
      out.write("\t\t \t\t\t<input myname=\"");
      out.print(column );
      out.write("\" value=\"");
      out.print(map.get(column) );
      out.write("\" />\r\n");
      out.write("\t\t \t\t</td>\r\n");
      out.write("\t\t\t");
	continue;
			}
      out.write("\r\n");
      out.write("\t\t  \t\t<td ");
if(columnmap.getWidth()!=null){
      out.write("width=\"");
      out.print(columnmap.getWidth() );
      out.write('"');
} 
      out.write("\r\n");
      out.write("\t\t  \t");
		if(columnmap.getIscheckbox()){
      out.write("\r\n");
      out.write("\t\t  \t\t\t\t><input type=\"checkbox\" class=\"checkboxes\" value=\"");
      out.print(map.get(column));
      out.write("\" />\r\n");
      out.write("\t\t  \t");
		}else if(columnmap.getIsoperation()){
      out.write("\t\r\n");
      out.write("\t\t  \t");
		 	if(columnmap.getIscasewhen()){
      out.write("\r\n");
      out.write("\t\t  \t\t\t\t\t>");
      out.print(columnmap.getWhen().get(map.get(columnmap.getCases())) );
      out.write(" \r\n");
      out.write("\t\t  \t");
			}else{
      out.write("\r\n");
      out.write("\t\t  \t\t\t\t\t>");
      out.print(column );
      out.write(" \r\n");
      out.write("\t\t  \t");
			}
      out.write("\r\n");
      out.write("  \t\t\t\t\t\t\r\n");
      out.write("  \t\t\t");
		}else if(columnmap.getIsnum()){
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t\t>");
      out.print((j+1)+pages.getPageSize()*(pages.getCurrPageNumber()-1) );
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<div style=\"display:none;\"><input type=\"checkbox\" class=\"checkboxes\" value=\"");
      out.print(map.get(column) );
      out.write("\" /></div>\r\n");
      out.write("\t\t\t");
		}else{
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t myattrone=\"");
      out.print(column );
      out.write("\" \r\n");
      out.write("\t\t\t\t\t\t\t");
if(columnmap.getIsshowcode()){
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t>");
      out.print(PowerStatic.getCodeName(columnmap.getCode()+"_"+map.get(column)) );
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t");
}else{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t");

									//如果有列要计算总和
									if(columnmap.getIsSumColumn()){
										isTotal=true;
										someColumMap.put(column,DoubleUtils.add(StringUtils.toDoubleByObject(someColumMap.get(column)),StringUtils.toDoubleByObject(map.get(column)) ) );
									}
								
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t");
if(map.get(column) != null && columnmap.getLength() > 0 && columnmap.getLength() < map.get(column).toString().length() ) {
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmyattrtwo=\"");
      out.print(map.get(column));
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(map.get(column).toString().substring(0,columnmap.getLength()) );
      out.write("...\r\n");
      out.write("\t\t\t\t\t\t\t\t");
} else {
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t>");
      out.print(map.get(column)==null?"":map.get(column) );
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t");
		}
      out.write("\r\n");
      out.write("\t\t  \t\t</td>\r\n");
      out.write("\t\t  \t");
	}
		  	
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("  \t");
	}
      out.write("\r\n");
      out.write("  \t");
	if(isTotal){
      out.write("\r\n");
      out.write("  \t\t<tr>\r\n");
      out.write("\t\t\t");

		  		for(int i=0;i<columnList.size();i++){
		  			PageColumn columnmap=columnList.get(i);
		  			if(i==0){
		  	
      out.write("\t\r\n");
      out.write("\t\t  \t\t\t\t<td>合计</td>\r\n");
      out.write("\t\t  \t");
		}else{
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print( someColumMap.get(columnmap.getColumn())!=null?someColumMap.get(columnmap.getColumn()):"" );
      out.write("</td>\r\n");
      out.write("\t\t\t");
		}		
		  		}
		  	
      out.write("\r\n");
      out.write("\t\t</tr>\t\r\n");
      out.write("  \t");
	}
      out.write("\r\n");
      out.write("\t</tbody>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<div class=\"row\">\r\n");
      out.write("\t<ul id=\"pageUL");
      out.print(listMark );
      out.write("\" class=\"pagination\" style=\"width:auto !important;float: left;\">\r\n");
      out.write("\t     ");
 if(pages.isFirst()){
      out.write("\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\">首页</a></li><li><a href=\"javascript:void(0);\">上一页</a></li>\r\n");
      out.write("\t\t ");
	}else{
      out.write("\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\" start=\"1\" limit=\"");
      out.print(pages.getPageSize() );
      out.write("\" >首页</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\" start=\"");
      out.print(pages.getPrevious() );
      out.write("\" limit=\"");
      out.print(pages.getPageSize() );
      out.write("\">上一页</a></li>\r\n");
      out.write("\t\t ");
 }
		 	for(int i=pages.getBetweenIndex().getStartIndex();i<=pages.getBetweenIndex().getEndIndex();i++){
		 
      out.write("\r\n");
      out.write("\t\t \t\t<li><a \r\n");
      out.write("\t\t \t");
	 if(pages.getCurrPageNumber() == i){ 
      out.write("\r\n");
      out.write("\t\t \t\t\t style=\"color:red !important;\"\r\n");
      out.write("\t\t \t");
	 }  
      out.write("\r\n");
      out.write("\t\t \t\t href=\"javascript:void(0);\" start=\"");
      out.print(i );
      out.write("\" limit=\"");
      out.print(pages.getPageSize() );
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(i );
      out.write("</a></li>\r\n");
      out.write("\t\t ");
 }  
      out.write("\r\n");
      out.write("\t\t ");
 if(pages.isLast()){ 
      out.write("\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\">下一页</a></li><li><a href=\"javascript:void(0);\">尾页</a></li>\r\n");
      out.write("\t\t ");
 }else{ 
      out.write("\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\" start=\"");
      out.print(pages.getNext() );
      out.write("\" limit=\"");
      out.print(pages.getPageSize() );
      out.write("\" >下一页</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"javascript:void(0);\" start=\"");
      out.print(pages.getTotalPages() );
      out.write("\" limit=\"");
      out.print(pages.getPageSize() );
      out.write("\" >尾页</a></li> \r\n");
      out.write("\t\t ");
 }  
      out.write("\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t\r\n");
      out.write("\t<div style=\"padding-top:20px;padding-right:15px; text-align: left;float: right;\">\r\n");
      out.write("\t\t<div class=\"btn-group dropup \">\r\n");
      out.write("\t\t\t<a class=\"btn default \" href=\"#\" data-toggle=\"dropdown\" style=\"padding: 1px 4px;\">显示列<i class=\"fa fa-angle-up\"></i></a>\r\n");
      out.write("\t\t\t<div id=\"commonid");
      out.print(listMark );
      out.write("_column_toggler\" style=\"height:220px;overflow: auto;\" class=\"dropdown-menu hold-on-click dropdown-checkboxes pull-right\">\r\n");
      out.write("\t\t\t\t\t");

				  		for(int i=0;i<columnList.size();i++){
				  			PageColumn map=columnList.get(i);
				  	
      out.write("\r\n");
      out.write("\t\t\t\t  \t\t<label>\r\n");
      out.write("\t\t\t\t\t  \t\t<input name=\"ISSHOWCOLUMS\" type=\"checkbox\"  mytattr=\"");
      out.print(map.getTitle() );
      out.write("\" value=\"");
      out.print(i );
      out.write("\" data-column=\"");
      out.print(i );
      out.write("\"\r\n");
      out.write("\t\t\t\t\t  \t\t");

					  			//控制初始化列是否显示与隐藏
					  		if(!( (showcolumnMap==null&&map.getHiddle()) || (showcolumnMap!=null&& showcolumnMap.get(String.valueOf(i))==null))){
      out.write(" checked ");
}
					  		
      out.write("\r\n");
      out.write("\t\t\t\t\t  \t\t />");
      out.print(map.getTitle() );
      out.write("\r\n");
      out.write("\t\t\t\t  \t\t </label>\r\n");
      out.write("\t\t\t\t    ");
 } 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div  style=\"padding-top:20px;padding-right:15px; text-align: right;width:440px !important; float: right;\">\r\n");
      out.write("\t\t<div class=\"control-label col-md-12\" style=\"font-size:12px;padding-right: 0px;\">\r\n");
      out.write("\t\t \t共");
      out.print(pages.getTotalElements() );
      out.write("条数据,当前<font color=\"red\">");
      out.print(pages.getCurrPageNumber() );
      out.write('/');
      out.print(pages.getTotalPages() );
      out.write("</font>页,每页显示\r\n");
      out.write("\t\t\t<select id=\"changePagesiz");
      out.print(listMark );
      out.write("\" style=\"border: 1px solid #888;\">\r\n");
      out.write("\t\t\t\t");
if(pages.getPageSize()!=5&&pages.getPageSize()!=10&&pages.getPageSize()!=20&&pages.getPageSize()!=50){
      out.write("\r\n");
      out.write("\t\t\t\t\t<option selected=\"selected\" value=\"");
      out.print(pages.getPageSize() );
      out.write('"');
      out.write('>');
      out.print(pages.getPageSize() );
      out.write("</option>\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t<option ");
if(pages.getPageSize()==5){
      out.write(" selected=\"selected\" ");
} 
      out.write(" value=\"5\">5</option>\r\n");
      out.write("\t\t\t\t<option ");
if(pages.getPageSize()==10){
      out.write(" selected=\"selected\" ");
} 
      out.write(" value=\"10\">10</option>\r\n");
      out.write("\t\t\t\t<option ");
if(pages.getPageSize()==20){
      out.write(" selected=\"selected\" ");
} 
      out.write(" value=\"20\">20</option>\r\n");
      out.write("\t\t\t\t<option ");
if(pages.getPageSize()==50){
      out.write(" selected=\"selected\" ");
} 
      out.write(" value=\"50\">50</option>\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t\t条, 跳转到第\r\n");
      out.write("\t\t\t\t\t<input id=\"changePageIndex");
      out.print(listMark );
      out.write("\" size=\"3\" onkeyup=\"this.value=this.value.replace(/\\D/g,'')\" \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tonafterpaste=\"this.value=this.value.replace(/\\D/g,'')\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tonkeypress=\"enterPress");
      out.print(listMark );
      out.write("(event)\" onkeydown=\"enterPress");
      out.print(listMark );
      out.write("()\" style=\"border: 1px solid #888;\">\r\n");
      out.write("\t\t\t页<input id=\"changePageIndexbtn");
      out.print(listMark );
      out.write("\"  type=\"button\" class=\"btn blue\" value=\"GO\" style=\" padding: 2px 5px;margin: -2px 0 0 5px;font-weight: bold;font-size: 12px;\"/>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\t //初始化控件 table列表\r\n");
      out.write("\t TableAdvanced");
      out.print(listMark );
      out.write(".init();\r\n");
      out.write("\t //设置页大小\r\n");
      out.write("\t $(\"#changePagesiz");
      out.print(listMark );
      out.write("\").change(function(){\r\n");
      out.write("\t\t gongyongtiaozhuan");
      out.print(listMark );
      out.write("(1,$(this).val());//刷新列表\r\n");
      out.write("\t });\r\n");
      out.write("\t //跳转页码\r\n");
      out.write("\t $(\"#changePageIndexbtn");
      out.print(listMark );
      out.write("\").click(function(){\r\n");
      out.write("\t\t var pageindex=$(\"#changePageIndex");
      out.print(listMark );
      out.write("\").val();\r\n");
      out.write("\t\t if(pageindex!=null&&pageindex!=\"\"){\r\n");
      out.write("\t\t\t gongyongtiaozhuan");
      out.print(listMark );
      out.write("(pageindex,$(\"#changePagesiz");
      out.print(listMark );
      out.write("\").val());//刷新列表\r\n");
      out.write("\t\t }\r\n");
      out.write("\t });\r\n");
      out.write("\t//翻页\r\n");
      out.write("\t $(\"#pageUL");
      out.print(listMark );
      out.write(" li\").on('click', function() {\r\n");
      out.write("\t\t var start=$(this).find(\"a\").attr(\"start\");\r\n");
      out.write("\t\t var limit=$(\"#changePagesiz");
      out.print(listMark );
      out.write("\").val();//$(this).find(\"a\").attr(\"limit\");\r\n");
      out.write("\t\t if(start!=null&&limit!=null){\r\n");
      out.write("\t\t\t gongyongtiaozhuan");
      out.print(listMark );
      out.write("(start,limit);//刷新列表\r\n");
      out.write("\t\t }\r\n");
      out.write("\t });\r\n");
      out.write("\t//列表标题行复选框点击\r\n");
      out.write("\t $(\"#commonid");
      out.print(listMark );
      out.write(" input[type='checkbox'].group-checkable\").click(function(){\r\n");
      out.write("\t\t $(\"#commonid");
      out.print(listMark );
      out.write(" input[type='checkbox'].checkboxes\").prop(\"checked\",$(this).prop(\"checked\"))\r\n");
      out.write("\t });\r\n");
      out.write("\t//鼠标悬停显示剩余内容事件\r\n");
      out.write("\t$(\"#commonid");
      out.print(listMark );
      out.write(" td[myattrtwo]\").mouseover(function(e){\r\n");
      out.write("\t\tvar a = $(this).attr(\"myattrtwo\");\r\n");
      out.write("\t\t if(a){\r\n");
      out.write("\t\t\t$(this).css(\"cursor\", \"pointer\");\r\n");
      out.write("\t\t    var tooltip = \"<div id='tool_tip'>\"+ a +\"<\\/div>\"; //创建 div 元素\r\n");
      out.write("\t\t\t$(this).append(tooltip);\t//把它追加到文档中\r\n");
      out.write("\t\t\t//$(\"#tool_tip\").css({\"top\": (e.pageY+20) + \"px\",\"left\": (e.pageX+10)  + \"px\"}).show(\"fast\");\t  //设置x坐标和y坐标，并且显示\r\n");
      out.write("\t\t\t$(\"#tool_tip\").css({\"top\": ( $(this).position().top+$(this).outerHeight() ) + \"px\",\"left\": $(this).position().left + \"px\"}).show(\"fast\");\t  //设置x坐标和y坐标，并且显示\r\n");
      out.write("\t\t }\r\n");
      out.write("    }).mouseout(function(){\t\t\r\n");
      out.write("\t\t$(\"#tool_tip\").remove();   //移除 \r\n");
      out.write("    }).mousemove(function(e){\r\n");
      out.write("\t\t//$(\"#tool_tip\").css({\"top\": (e.pageY+20) + \"px\",\"left\": (e.pageX+10)  + \"px\"});\r\n");
      out.write("\t});\r\n");
      out.write("//刷新当前页码\r\n");
      out.write("function RefreshCurPage");
      out.print(listMark );
      out.write("(){\r\n");
      out.write("\tgongyongtiaozhuan");
      out.print(listMark );
      out.write('(');
      out.print(pages.getCurrPageNumber() );
      out.write(',');
      out.print(pages.getPageSize() );
      out.write(");\r\n");
      out.write("}\r\n");
      out.write("//点击查询按钮执行的函数，目的为了让起设置页大小生效\r\n");
      out.write("function ClickFindPage");
      out.print(listMark );
      out.write("(){\r\n");
      out.write("\tgongyongtiaozhuan");
      out.print(listMark );
      out.write('(');
      out.write('1');
      out.write(',');
      out.print(pages.getPageSize() );
      out.write(");\r\n");
      out.write("}\r\n");
      out.write("//公共跳转页\r\n");
      out.write("function gongyongtiaozhuan");
      out.print(listMark );
      out.write("(pageIndex,pageSize){\r\n");
      out.write("\tvar parmas=\"\";\r\n");
      out.write("\tif(pageIndex!=null){\r\n");
      out.write("\t\tparmas+=\"&pageIndex=\"+pageIndex;//页码\r\n");
      out.write("\t}\r\n");
      out.write("\tif(pageSize!=null){\r\n");
      out.write("\t\tparmas+=\"&pageSize=\"+pageSize;//页大小\r\n");
      out.write("\t}\r\n");
      out.write("\tloadotherPage");
      out.print(listMark );
      out.write("(parmas);//在具体 List.jsp中。\r\n");
      out.write("\t/*//替换主题内容的函数\r\n");
      out.write("\tfunction loadotherPage(params) {\r\n");
      out.write("\t\tvar param=$(\"#queryForm\").serialize();\r\n");
      out.write("\t\tjQuery(\"#tableList\").load(\"system/sysuser/sysuserList\",param+\"&\"+params,function(response,status,xhr){\r\n");
      out.write("\t\t\tif(xhr.status==403){\r\n");
      out.write("\t\t\t\t$(this).html(xhr.responseText);\r\n");
      out.write("\t\t\t}else if(xhr.status==404){\r\n");
      out.write("\t\t\t\t$(this).html(xhr.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\t\r\n");
      out.write("\t}*/\r\n");
      out.write("}\r\n");
      out.write("//跳转文本框中的回车事件\r\n");
      out.write("function enterPress");
      out.print(listMark );
      out.write("(e){ //传入 event \r\n");
      out.write("\tvar e = e || window.event; \r\n");
      out.write("\tif(e.keyCode == 13){ \r\n");
      out.write("\t\t$(\"#changePageIndexbtn");
      out.print(listMark );
      out.write("\")[0].click();\r\n");
      out.write("\t} \r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
